// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/lib/schema/zod"
  // useMultipleFiles       = true // default is false
  createInputTypes = false // default is true
  // createModelTypes       = false // default is true
  // addInputTypeValidation = false // default is true
  // addIncludeType       = false // default is true
  // addSelectType        = false // default is true
  // validateWhereUniqueInput         = true // default is false
  // createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators = false // default is true
  // coerceDate           = false // default is true
  // writeNullishInModelTypes         = true // default is false
}

model User {
  id      String @id @default(uuid())
  address String @unique

  entries CompetitionEntry[]
  results CompetitionResult[]
}

model Company {
  id              String           @id @default(uuid())
  name            String
  superpowers     Superpower[]
  carbonEmissions CarbonEmission[]
}

model Category {
  id          String       @id @default(uuid())
  name        String
  superpowers Superpower[]
}

model Superpower {
  id          String  @id @default(uuid())
  tokenId     Int?
  imageUrl    String
  name        String
  description String
  mintcalled  Boolean @default(false)
  minted      Boolean @default(false)

  rank       Int
  score      Int
  year       Int
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])

  entries CompetitionEntry[]
  rewards CompetitionReward[]
}

model CarbonEmission {
  id   String @id @default(uuid())
  year Int

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  scope1      Float?
  scope2      Float?
  scope3      Float?
  revenue     Float?
  revenueUnit String?

  scoreReport ScoreReport?

  @@unique([companyId, year])
}

model ScoreReport {
  id               String         @id @default(uuid())
  carbonEmissionId String         @unique
  carbonEmission   CarbonEmission @relation(fields: [carbonEmissionId], references: [id])

  scoreCO2Reduction     Float?
  scoreCarbonEfficiency Float
  totalScore            Float?
}

enum CompetitinStatus {
  DRAFT // ユーザーに見えない
  UPCOMING // ユーザーに見えているがエントリーできない
  OPEN // エントリー可能
  CLOSED // エントリー終了
  FINISHED // 結果発表済み
  OUTDATED // ユーザーに見えない過去のコンペ
}

model Competition {
  id        String           @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  status    CompetitinStatus @default(UPCOMING)
  year      Int              @default(2022)

  entries CompetitionEntry[]
  rewards CompetitionReward[]
  results CompetitionResult[]
}

model CompetitionEntry {
  id            String             @id @default(uuid())
  competitionId String
  competition   Competition        @relation(fields: [competitionId], references: [id])
  userId        String
  user          User               @relation(fields: [userId], references: [id])
  superpowerId  String
  superpower    Superpower         @relation(fields: [superpowerId], references: [id])
  order         Int
  entryAt       DateTime           @default(now()) @updatedAt
  resultId      String?
  result        CompetitionResult? @relation(fields: [resultId], references: [id])

  @@unique([competitionId, userId, superpowerId])
  @@unique([competitionId, userId, order])
}

model CompetitionReward {
  id            String      @id @default(uuid())
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id])
  rank          Int
  superpowerId  String?
  superpower    Superpower? @relation(fields: [superpowerId], references: [id])
  rewardAmount  Int?

  @@unique([superpowerId])
}

model CompetitionResult {
  id             String      @id @default(uuid())
  competitionId  String
  competition    Competition @relation(fields: [competitionId], references: [id])
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  rank           Int
  totalScore     Int
  rewardReceived Boolean     @default(false)

  entries CompetitionEntry[]
}
